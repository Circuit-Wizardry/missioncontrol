/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.circuitwizardry.missioncontrol;
import com.fazecast.jSerialComm.SerialPort;
import com.circuitwizardry.missioncontrol.debrief.DebriefOverview;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import static javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE;

/**
 *
 * @author marce
 */
public class Debrief extends javax.swing.JFrame {
    
    boolean connected;
    SerialPort port;
    int boardId = 0;
    
    
    /**
     * Creates new form Debrief
     */
    public Debrief() {
        initComponents();
        jPanel1.setVisible(false);
        updateComSelector();
        
        // DISCONNECT ON CLOSE
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent event) {
                if (connected) {
                    port.writeBytes(new byte[]{0x11, 0x16}, 2);
                    port.closePort();
                }
                dispose();
            }
        });
    }
    
    public void updateComSelector() {
        SerialPort ports[] = SerialPort.getCommPorts();
        comSelector.removeAllItems();
        System.out.println(ports.length);
        for (int i = 0; i < ports.length; i++) {
            comSelector.addItem(ports[i].getDescriptivePortName());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        comSelector = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        connectionStatus = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        refreshButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        downloadGraph = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("CW MissionControl Debrief");

        comSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "COM SELECTOR LONG NAME" }));
        comSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comSelectorActionPerformed(evt);
            }
        });

        jButton1.setText("Connect");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        connectionStatus.setText("Not connected.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        downloadGraph.setText("View");
        downloadGraph.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        downloadGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadGraphActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        jLabel3.setText("Clicking \"view\" will open an overview screen of your flight. It may take a minute!");
        jLabel3.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(downloadGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(connectionStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(backButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectionStatus)
                    .addComponent(refreshButton))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 5, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(downloadGraph)
                            .addComponent(jLabel3))
                        .addGap(5, 5, 5)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // CONNECT TO BOARD & READ WHAT ITS SENDING
        if (connected) return;
        
        connectionStatus.setText("There was an error connecting to your board.");
        
        SerialPort ports[] = SerialPort.getCommPorts();
        int selectedItem = comSelector.getSelectedIndex();
        SerialPort sp = ports[selectedItem];
        sp.setBaudRate(9600);
        sp.openPort();
        port = sp;
        
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(ProgramScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        int ba = sp.bytesAvailable();
        ba = sp.bytesAvailable();
        System.out.println(ba);
        if (ba > 100) {
            ba = sp.bytesAvailable();
        }
        if (ba > 0) {
            int boardId = 0;
            byte[] readBuffer = new byte[ba];
            sp.readBytes(readBuffer, readBuffer.length);
            for (int i = 0; i < readBuffer.length; i++) {
                System.out.print(readBuffer[i] + ", "); // for debugging
                
                if (readBuffer[i] == 115)  {    // our byte before our board id bit
                    boardId = readBuffer[i+1]; // skip new line and carriage return bytes
                }
            }
            
            if (boardId != 0) {
                connected = true;
                connectionStatus.setText("Connected to board ID " + boardId);
            }
            System.out.println(boardId);
            
            this.boardId = boardId;
            
            // Handling code for first connect if STARLIGHT is detected
            
            if (boardId == 99) {
                // for response
                port.writeBytes(new byte[]{0x11, 0x12}, 2);
                
                jPanel1.setVisible(true);
                connectionStatus.setText("Connected to STARLIGHT board.");
                // Add two JPanels for EJECTION and IGNITER charges
            }

            if (boardId == 100) {
                // for response
                port.writeBytes(new byte[]{0x11, 0x12}, 2);
                
                jPanel1.setVisible(true);
                connectionStatus.setText("Connected to STARLIGHT MINI board.");
                // Add two JPanels for EJECTION and IGNITER charges
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    
    private ArrayList<String[]> parseData() {
        // read file from board
        StringBuilder builder = new StringBuilder();
        
        int cnt = 0;
        
        int ba = port.bytesAvailable();
        while (ba > 0) {
            int boardId = 0;
            byte[] readBuffer = new byte[ba];
            port.readBytes(readBuffer, readBuffer.length);
            for (int i = 0; i < readBuffer.length; i++) {
                builder.append((char)readBuffer[i]);
            }
            try {
                Thread.sleep(10);
            } catch (InterruptedException ex) {
                Logger.getLogger(Debrief.class.getName()).log(Level.SEVERE, null, ex);
            }
            ba = port.bytesAvailable();
            System.out.println(ba);
            cnt += 1;
            if (cnt > 1000) {
                break;
            }
        }
        
        String flightData = builder.toString(); 
        
        if (boardId == 99) {
            flightData = flightData.split("sc")[1];   
        }
        if (boardId == 100) {
            flightData = flightData.split("sd")[1];   
        }
        
        System.out.println(flightData);
        flightData = flightData.replace("b", "");
        flightData = flightData.replaceAll("\n", "");
        flightData = flightData.replaceAll("\r", "");
        try (Writer writer = new BufferedWriter(new OutputStreamWriter(
            new FileOutputStream("./flight_data.txt"), "utf-8"))) {
            writer.write(flightData);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Debrief.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Debrief.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String[] chunks = flightData.split(":");
        
        ArrayList<String[]> outputData = new ArrayList<String[]>();
        
        System.out.println(Arrays.toString(chunks));
        
        for (int i = 0; i < chunks.length; i++) {
            String[] iData = chunks[i].split(",");
            outputData.add(iData);
//            accelX.add(Double.parseDouble(iData[0]));   
        }
        
        return outputData;
    }

    
    private void downloadGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadGraphActionPerformed
        if (connected) {
        parseData();
        var debriefOverview = new DebriefOverview(port, boardId);
        debriefOverview.setVisible(true);
        }
        
//        setVisible(false);
        
//        
//        
//        port.writeBytes(new byte[]{0x11, 0x14}, 2);
//        
//        try {
//            Thread.sleep(500);
//        } catch (InterruptedException ex) {
//            Logger.getLogger(Debrief.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        
//        ArrayList<String[]> data = parseData();
//        
//        if (boardId == 99) {
//            showGraph(data, 2, "X Acceleration", "Acceleration");
//            showGraph(data, 3, "Y Acceleration", "Acceleration");
//            showGraph(data, 4, "Z Acceleration", "Acceleration");
//            showGraph(data, 5, "Altitude", "Altitude (feet)");
//            showGraph(data, 6, "Temperature", "Temperature (C)");
//            showGraph(data, 7, "Roll", "Roll");
//            showGraph(data, 8, "Pitch", "Pitch"); 
//        }
//        if (boardId == 100) {
//            showGraph(data, 2, "Altitude", "Altitude (feet)");
//            showGraph(data, 3, "Temperature", "Temperature (C)");
//            showGraph(data, 4, "X Acceleration", "Acceleration");
//            showGraph(data, 5, "Y Acceleration", "Acceleration");
//            showGraph(data, 6, "Z Acceleration", "Acceleration");
//        }

        
    }//GEN-LAST:event_downloadGraphActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        if (connected) {
            port.writeBytes(new byte[]{0x11, 0x16}, 2);
            port.closePort();   
        }
        JFrame mc = new MainScreen();
        mc.setVisible(true);
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        updateComSelector();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void comSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comSelectorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comSelectorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Debrief.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Debrief.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Debrief.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Debrief.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Debrief().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox<String> comSelector;
    private javax.swing.JLabel connectionStatus;
    private javax.swing.JButton downloadGraph;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton refreshButton;
    // End of variables declaration//GEN-END:variables
}
