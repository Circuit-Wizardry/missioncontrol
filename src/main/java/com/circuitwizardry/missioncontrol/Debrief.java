/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.circuitwizardry.missioncontrol;
import com.circuitwizardry.missioncontrol.features.PyroCharge;
import com.circuitwizardry.missioncontrol.features.ThrustVectoring;
import com.fazecast.jSerialComm.SerialPort;
import java.awt.BorderLayout;
import java.awt.Desktop;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import org.knowm.xchart.CSVImporter;
import org.knowm.xchart.CSVImporter.DataOrientation;
import org.knowm.xchart.*;
import org.knowm.xchart.BitmapEncoder.BitmapFormat;
import org.knowm.xchart.internal.chartpart.Annotation;

/**
 *
 * @author marce
 */
public class Debrief extends javax.swing.JFrame {
    
    boolean connected;
    SerialPort port;
    
    String[] triggerNames = {"Altitude", "Altitude", "Delayed", "Launch", "Delayed", "Burnout", "Delayed", "Landing", "Delayed"};
    
    /**
     * Creates new form Debrief
     */
    public Debrief() {
        initComponents();
        jPanel1.setVisible(false);
        updateComSelector();
    }
    
    public void updateComSelector() {
        SerialPort ports[] = SerialPort.getCommPorts();
        comSelector.removeAllItems();
        System.out.println(ports.length);
        for (int i = 0; i < ports.length; i++) {
            comSelector.addItem(ports[i].getDescriptivePortName());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        comSelector = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        connectionStatus = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        downloadGraph = new javax.swing.JButton();
        imageView = new javax.swing.JCheckBox();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("CW MissionControl Debrief");

        comSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setText("Connect");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        connectionStatus.setText("Not connected.");

        jCheckBox1.setText("Start at detected launch");

        downloadGraph.setText("View");
        downloadGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadGraphActionPerformed(evt);
            }
        });

        imageView.setText("View as image");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(downloadGraph)
                    .addComponent(jCheckBox1)
                    .addComponent(imageView))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(imageView)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downloadGraph)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(connectionStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 69, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectionStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private ArrayList<String[]> parseData() {
        // read file from board
        StringBuilder builder = new StringBuilder();
        
        int cnt = 0;
        
        int ba = port.bytesAvailable();
        while (ba > 0) {
            int boardId = 0;
            byte[] readBuffer = new byte[ba];
            port.readBytes(readBuffer, readBuffer.length);
            for (int i = 0; i < readBuffer.length; i++) {
                builder.append((char)readBuffer[i]);
            }
            try {
                Thread.sleep(10);
            } catch (InterruptedException ex) {
                Logger.getLogger(Debrief.class.getName()).log(Level.SEVERE, null, ex);
            }
            ba = port.bytesAvailable();
            System.out.println(ba);
            cnt += 1;
            if (cnt > 1000) {
                break;
            }
        }
        
        String flightData = builder.toString(); 
        
        flightData = flightData.split("sc")[1];
        
        System.out.println(flightData);
        flightData = flightData.replace("b", "");
        flightData = flightData.replaceAll("\n", "");
        flightData = flightData.replaceAll("\r", "");
        try (Writer writer = new BufferedWriter(new OutputStreamWriter(
            new FileOutputStream("./flight_data.txt"), "utf-8"))) {
            writer.write(flightData);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Debrief.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Debrief.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String[] chunks = flightData.split(":");
        
        ArrayList<String[]> outputData = new ArrayList<String[]>();
        
        System.out.println(Arrays.toString(chunks));
        
        for (int i = 0; i < chunks.length; i++) {
            String[] iData = chunks[i].split(",");
            outputData.add(iData);
//            accelX.add(Double.parseDouble(iData[0]));   
        }
        
        return outputData;
    }
    
    private void showGraph(ArrayList<String[]> data, int dataIndex, String graphName, String graphX) {
        
        ArrayList<Double> dataFinal = new ArrayList<Double>();
        
        for (int i = 0; i < data.size(); i++) {
            dataFinal.add(Double.parseDouble(data.get(i)[dataIndex]));
        }
        
        double maximum = dataFinal.get(0);
        for (int i = 1; i < dataFinal.size(); i++) {
            if (maximum < dataFinal.get(i)) {
                maximum = dataFinal.get(i);
            }
        }
        
        double minimum = dataFinal.get(0);
        for (int i = 1; i < dataFinal.size(); i++) {
            if (minimum > dataFinal.get(i)) {
                minimum = dataFinal.get(i);
            }
        }
        
        ArrayList<Double> time = new ArrayList<Double>();
        ArrayList<Annotation> annotations = new ArrayList<Annotation>();
        for (double i = 0; i < data.size(); i++) {
            // annotations
            switch (Integer.parseInt(data.get((int) i)[0])) {
                    case 1:
                        System.out.println("found annotation!");
                        annotations.add(new AnnotationLine(i, true, false));
                        annotations.add(new AnnotationText("Launch", i - (data.size() / 15), (float)Math.random() * (maximum - minimum) + minimum, false));
                    case 2:
                        System.out.println("found apogee!");
                        annotations.add(new AnnotationLine(i, true, false));
                        annotations.add(new AnnotationText("Apogee", i - (data.size() / 15), (float)Math.random() * (maximum - minimum) + minimum, false));
            }
            if (Integer.parseInt(data.get((int) i)[0]) >= 10) {
                System.out.println("found event!");
                annotations.add(new AnnotationLine(i, true, false));
                annotations.add(new AnnotationText(triggerNames[Integer.parseInt(data.get((int) i)[0]) - 10], i - (data.size() / 15), (float)Math.random() * (maximum - minimum) + minimum, false));
            }
            time.add(i);
        }
        
        // Create Chart
        XYChart chart = QuickChart.getChart(graphName, "Time", graphX, "x", time, dataFinal);
        
        for (int i = 0; i < annotations.size(); i++) {
            chart.addAnnotation(annotations.get(i));
        }
        
        try {
            // Show it
            BitmapEncoder.saveBitmapWithDPI(chart, "./graphs/" + graphName + ".png", BitmapFormat.PNG, 1000);
        } catch (IOException ex) {
            Logger.getLogger(Debrief.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (!imageView.isSelected()) {
            // Create and set up the window.
            JFrame frame = new JFrame(graphName);
            frame.setLayout(new BorderLayout());
            frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);

            // chart
            JPanel chartPanel = new XChartPanel<XYChart>(chart);
            frame.add(chartPanel, BorderLayout.CENTER);

            // label
            JLabel label = new JLabel("Saved to " + new File("./graphs/" + graphName + ".png").getAbsolutePath(), SwingConstants.CENTER);
            frame.add(label, BorderLayout.SOUTH);

            // Display the window.
            frame.pack();
            frame.setVisible(true);   
        } else {
            try {
                Desktop.getDesktop().open(new File("./graphs/" + graphName + ".png"));
            } catch (IOException ex) {
                Logger.getLogger(Debrief.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // CONNECT TO BOARD & READ WHAT ITS SENDING
        if (connected) return;
        
        connectionStatus.setText("There was an error connecting to your board.");
        
        SerialPort ports[] = SerialPort.getCommPorts();
        int selectedItem = comSelector.getSelectedIndex();
        SerialPort sp = ports[selectedItem];
        sp.setBaudRate(9600);
        sp.openPort();
        port = sp;
        
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(ProgramScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        int ba = sp.bytesAvailable();
        ba = sp.bytesAvailable();
        System.out.println(ba);
        if (ba > 100) {
            ba = sp.bytesAvailable();
        }
        if (ba > 0) {
            int boardId = 0;
            byte[] readBuffer = new byte[ba];
            sp.readBytes(readBuffer, readBuffer.length);
            for (int i = 0; i < readBuffer.length; i++) {
                System.out.print(readBuffer[i] + ", "); // for debugging
                
                if (readBuffer[i] == 115)  {    // our byte before our board id bit
                    boardId = readBuffer[i+1]; // skip new line and carriage return bytes
                }
            }
            
            if (boardId != 0) {
                connected = true;
                connectionStatus.setText("Connected to board ID " + boardId);
            }
            System.out.println(boardId);
            
            // Handling code for first connect if STARLIGHT is detected
            
            if (boardId == 99) {
                // for response
                port.writeBytes(new byte[]{0x11, 0x12}, 2);
                
                jPanel1.setVisible(true);
                connectionStatus.setText("Connected to STARLIGHT board.");
                // Add two JPanels for EJECTION and IGNITER charges
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void downloadGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadGraphActionPerformed
        port.writeBytes(new byte[]{0x11, 0x14}, 2);
        
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(Debrief.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        ArrayList<String[]> data = parseData();
        
        showGraph(data, 1, "X Acceleration", "Acceleration");
        showGraph(data, 2, "Y Acceleration", "Acceleration");
        showGraph(data, 3, "Z Acceleration", "Acceleration");
        showGraph(data, 4, "Altitude", "Altitude (meters)");
        showGraph(data, 5, "Temperature", "Temperature (C)");
        showGraph(data, 6, "Roll", "Roll");
        showGraph(data, 7, "Pitch", "Pitch");
        
    }//GEN-LAST:event_downloadGraphActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Debrief.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Debrief.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Debrief.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Debrief.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Debrief().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comSelector;
    private javax.swing.JLabel connectionStatus;
    private javax.swing.JButton downloadGraph;
    private javax.swing.JCheckBox imageView;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
